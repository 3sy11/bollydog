[project]
name = "bollydog"
version = "0.1.3"
description = "bollydog framework - Event-driven, DDD and TDD as fundamental design paradigms"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "3sy11", email = ""}
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.11"
dependencies = [
    "uvicorn==0.21.1",
    "authlib==1.3.1",
    "starlette==0.36.3",
    "itsdangerous==2.1.2",
    "mode-streaming==0.4.1",
    "fire==0.5.0",
    "pyyaml==6.0.1",
    "websockets==12.0",
    "aiohttp",
    "environs",
    "ptpython",
    "sqlmodel",
    "structlog",
    "redis",
    "starlette-authentication",
    "databases==0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pydot",
    "pydot-ng",
    "graphviz",
    "aiomonitor",
    "aiosqlite",
    "pycli",
    "mycli",
    "iredis",
    "httpx",
]
optional = [
    "duckdb",
    "notion_client",
    "elasticsearch==8.14.0",
]

[project.scripts]
bollydog = "bollydog.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "requests",
    "pydot",
    "pydot-ng",
    "graphviz",
    "aiomonitor",
    "aiosqlite",
    "pycli",
    "ptpython",
    "mycli",
    "iredis",
    "elasticsearch",
    "httpx",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=bollydog",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["bollydog"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
