========================
CODE SNIPPETS
========================
TITLE: Install Mode from Source
DESCRIPTION: These shell commands demonstrate how to install the 'mode-streaming' library from its source code. It involves downloading the tarball, extracting it, navigating into the directory, building the package, and then installing it.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_16

LANGUAGE: Shell
CODE:
```
tar xvfz mode-streaming-0.2.1.tar.gz
cd mode-0.2.1
python -m build .
# python install
```

----------------------------------------

TITLE: Install Project Dependencies
DESCRIPTION: Installs the project's dependencies using pip from the requirements.txt file. It also handles installing the project itself in editable mode.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_1

LANGUAGE: sh
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Start a Service Manually
DESCRIPTION: This Python snippet shows how to manually start a service instance using its 'start' method within an asyncio context. This is a fundamental operation for initiating a service's execution.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_7

LANGUAGE: Python
CODE:
```
await service.start()
```

----------------------------------------

TITLE: Install pydot for Graph Visualization
DESCRIPTION: This shell command installs the pydot library, which is required for visualizing the service graph generated by Mode.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/index.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ pip install pydot
```

----------------------------------------

TITLE: Setup Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for the project. It ensures that dependencies are isolated and the environment is correctly configured.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_0

LANGUAGE: sh
CODE:
```
cd mode/
python -m venv env # Create python virtual environment, a `env/` has been created
source env/bin/active # Activate the environment
which pip # Ensure everything is well configured
```

----------------------------------------

TITLE: Install Mode Streaming with Eventlet Support
DESCRIPTION: Installs the Mode Streaming library with eventlet support, enabling integration with blocking Python libraries. This command should be run to prepare your environment for using eventlet with Mode.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_18

LANGUAGE: sh
CODE:
```
pip install -U mode-streaming[eventlet]
```

----------------------------------------

TITLE: Start a Faust Service Manually
DESCRIPTION: Shows the manual way to start a Faust service instance using its `start()` method. This is typically used within an asyncio event loop.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_1

LANGUAGE: python
CODE:
```
await service.start()
```

----------------------------------------

TITLE: Install pydot for Graph Visualization
DESCRIPTION: This command installs the 'pydot' library, which is required for visualizing service graphs generated by the 'beacon' object in Faust. It's a prerequisite for creating visual representations of your running system.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
pip install pydot
```

----------------------------------------

TITLE: Install Mode with Gevent Support
DESCRIPTION: This command installs the 'mode-streaming' package along with the 'gevent' extra, which enables integration with the gevent concurrency library. This is useful for bridging asyncio with blocking Python libraries.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_14

LANGUAGE: Shell
CODE:
```
pip install -U mode-streaming[gevent]
```

----------------------------------------

TITLE: Install Pre-commit Hook
DESCRIPTION: Installs the pre-commit hook to enforce code quality rules and commit message conventions automatically at commit time.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_2

LANGUAGE: sh
CODE:
```
pre-commit install
```

----------------------------------------

TITLE: Install Latest Mode from Pip
DESCRIPTION: This command installs the latest development version of the 'mode-streaming' library directly from the Python Package Index (PyPI). It ensures you have the most up-to-date features and bug fixes.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_17

LANGUAGE: Shell
CODE:
```
pip install mode-streaming
```

----------------------------------------

TITLE: Initialize Multiple Service Dependencies
DESCRIPTION: Demonstrates how to initialize a list of services as dependencies using the `on_init_dependencies` method. This is useful for starting multiple related services when the current service initializes.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_4

LANGUAGE: python
CODE:
```
class MyService(Service):

    def on_init_dependencies(self) -> None:
        return [
            ServiceA(loop=self.loop),
            ServiceB(loop=self.loop),
            ServiceC(loop=self.loop),
        ]
```

----------------------------------------

TITLE: Initialize Multiple Dependencies
DESCRIPTION: This Python code shows how to initialize a list of services that a given service depends on. The 'on_init_dependencies' method returns a list of service instances, ensuring they are started and managed correctly.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_10

LANGUAGE: Python
CODE:
```
class MyService(Service):

    def on_init_dependencies(self) -> None:
        return [
            ServiceA(loop=self.loop),
            ServiceB(loop=self.loop),
            ServiceC(loop=self.loop),
        ]
```

----------------------------------------

TITLE: Start a Coroutine as a Service Task
DESCRIPTION: Shows how to start a coroutine as a task within a service using `add_future`. The service will wait for this future to complete upon stopping.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_5

LANGUAGE: python
CODE:
```
class MyService(Service):

    async def on_start(self) -> None:
        self.add_future(self.my_coro())

    async def my_coro(self) -> None:
        print('Executing coroutine')
```

----------------------------------------

TITLE: Execute Program with Mode Worker
DESCRIPTION: This Python code snippet shows how to start a Mode application using its worker. It initializes the Worker with a base Service and a specified log level, then executes it from the command line.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
if __name__ == '__main__':
    from mode import Worker
    Worker(Service(), loglevel="info").execute_from_commandline()
```

----------------------------------------

TITLE: Start a Background Task
DESCRIPTION: This Python code shows how to define and start a background task within a Faust service using the '@Service.task' decorator. This allows for concurrent execution of asynchronous functions managed by the service.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_12

LANGUAGE: Python
CODE:
```
class MyService(Service):

    @Service.task
    async def _my_coro(self) -> None:
        print('Executing coroutine')
```

----------------------------------------

TITLE: Start a Coroutine as a Future
DESCRIPTION: This Python code demonstrates how to start an asynchronous coroutine as a future within a Faust service. The 'add_future' method ensures that the coroutine is awaited and its completion is managed as part of the service's lifecycle.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_11

LANGUAGE: Python
CODE:
```
class MyService(Service):

    async def on_start(self) -> None:
        self.add_future(self.my_coro())

    async def my_coro(self) -> None:
        print('Executing coroutine')
```

----------------------------------------

TITLE: Define a Service with Runtime Dependency in Python
DESCRIPTION: Illustrates how to define a service 'App' that has a runtime dependency on another service, 'PageViewCache'. The 'on_start' method is used to add 'page_view_cache' as a runtime dependency, ensuring it's available when 'App' starts.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_1

LANGUAGE: python
CODE:
```
class App(Service):
    page_view_cache: PageViewCache = None

    async def on_start(self) -> None:
        await self.add_runtime_dependency(self.page_view_cache)

    @cached_property
    def page_view_cache(self) -> PageViewCache:
        return PageViewCache()
```

----------------------------------------

TITLE: Add Service Dependency using add_dependency
DESCRIPTION: Explains how to declare a dependency on another service using the `add_dependency` method within a service's `__post_init__` method. This ensures the dependent service is started and managed alongside the current service.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_3

LANGUAGE: python
CODE:
```
class MyService(Service):

    def __post_init__(self) -> None:
        self.add_dependency(OtherService(loop=self.loop))
```

----------------------------------------

TITLE: Add Service Dependency
DESCRIPTION: This Python code illustrates how to establish a dependency between services within the Faust framework. By calling 'add_dependency' in the '__post_init__' method, a service can declare that it relies on another service to be started.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_9

LANGUAGE: Python
CODE:
```
class MyService(Service):
    def __post_init__(self) -> None:
        self.add_dependency(OtherService(loop=self.loop))
```

----------------------------------------

TITLE: Create a Long-Running Background Task
DESCRIPTION: Provides an example of a background task that continuously runs until the service is stopped. It uses `self.sleep` for non-blocking waits and checks `self.should_stop` to gracefully exit.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_7

LANGUAGE: python
CODE:
```
class MyService(Service):

    @Service.task
    async def _my_coro(self) -> None:
        while not self.should_stop:
            # NOTE: self.sleep will wait for one second, or
            #       until service stopped/crashed.
            await self.sleep(1.0)
            print('Background thread waking up')
```

----------------------------------------

TITLE: Start a Persistent Background Task
DESCRIPTION: This Python code defines a background task that continuously runs until the service is stopped. It uses a 'while not self.should_stop' loop and 'await self.sleep(1.0)' to periodically execute its logic, demonstrating a common pattern for long-running background operations.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_13

LANGUAGE: Python
CODE:
```
class MyService(Service):

    @Service.task
    async def _my_coro(self) -> None:
        while not self.should_stop:
            # NOTE: self.sleep will wait for one second, or
            #       until service stopped/crashed.
            await self.sleep(1.0)
            print('Background thread waking up')
```

----------------------------------------

TITLE: Serve Documentation Locally with MkDocs
DESCRIPTION: Builds and serves the project's documentation locally using MkDocs. This allows developers to preview documentation changes before publishing.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_6

LANGUAGE: sh
CODE:
```
mkdocs serve
```

----------------------------------------

TITLE: Run Faust Services with mode.Worker
DESCRIPTION: Illustrates how to use `mode.Worker` to manage and execute Faust services from the command line. This includes configuring logging and daemonization, and is the standard way to run Faust applications.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_2

LANGUAGE: python
CODE:
```
if __name__ == '__main__':
    import mode
    worker = mode.Worker(
        MyService(),
        loglevel='INFO',
        logfile=None,
        daemon=False,
    )
    worker.execute_from_commandline()
```

----------------------------------------

TITLE: Define a Basic Faust Service
DESCRIPTION: Demonstrates how to create a custom service by subclassing Faust's `Service` class and implementing basic lifecycle methods: `on_start`, `on_started`, and `on_stop`. These methods are called at different stages of the service's execution.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_0

LANGUAGE: python
CODE:
```
class MyService(Service):

    async def on_start(self) -> None:
        print('Im starting now')

    async def on_started(self) -> None:
        print('Im ready')

    async def on_stop(self) -> None:
        print('Im stopping now')
```

----------------------------------------

TITLE: Execute Program with Mode Worker in Python
DESCRIPTION: Provides the standard entry point for a Mode application using the 'Worker' class. It initializes the worker with a root service and a specified log level, then executes it from the command line.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_3

LANGUAGE: python
CODE:
```
if __name__ == '__main__':
    from mode import Worker
    Worker(Service(), loglevel="info").execute_from_commandline()
```

----------------------------------------

TITLE: Execute Services with mode.Worker
DESCRIPTION: This Python code demonstrates how to use 'mode.Worker' to run an asyncio program from the command line. It initializes a 'Worker' with a 'MyService' instance and allows configuration of logging and daemonization, providing a convenient way to launch services.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_8

LANGUAGE: Python
CODE:
```
if __name__ == '__main__':
    import mode
    worker = mode.Worker(
        MyService(),
        loglevel='INFO',
        logfile=None,
        daemon=False,
    )
    worker.execute_from_commandline()
```

----------------------------------------

TITLE: Define a Basic Service
DESCRIPTION: This Python code defines a simple service by subclassing the 'Service' class. It includes methods for handling the service's lifecycle events: 'on_start' when the service begins, 'on_started' when it's ready, and 'on_stop' when it's shutting down.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_6

LANGUAGE: Python
CODE:
```
class MyService(Service):

    async def on_start(self) -> None:
        print('Im starting now')

    async def on_started(self) -> None:
        print('Im ready')

    async def on_stop(self) -> None:
        print('Im stopping now')
```

----------------------------------------

TITLE: Run Project Tests with Pytest
DESCRIPTION: Executes the project's test suite using pytest, including coverage reporting. This ensures that all functionalities work as expected.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_4

LANGUAGE: sh
CODE:
```
./scripts/tests.sh
```

----------------------------------------

TITLE: Format and Lint Code with Ruff
DESCRIPTION: Runs the formatting and linting scripts using Ruff to ensure code compliance with project standards. The `--fix` flag attempts to automatically correct linting issues.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_3

LANGUAGE: sh
CODE:
```
./scripts/format.sh
```

----------------------------------------

TITLE: Configure Eventlet as Event Loop in Mode
DESCRIPTION: Sets up eventlet as the event loop for the Mode Streaming library. This Python code snippet must be placed at the very top of your entrypoint module, before any other library imports, to ensure proper execution.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_19

LANGUAGE: python
CODE:
```
#!/usr/bin/env python3
import mode.loop
mode.loop.use('eventlet')
# execute program

```

----------------------------------------

TITLE: Dump Service Graph to PNG
DESCRIPTION: This Python code snippet demonstrates how to modify an 'AppService' class to dump its service graph to a PNG image file named 'image.png' upon startup. It utilizes the 'pydot' library and an in-memory string buffer to generate the graph data.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_5

LANGUAGE: Python
CODE:
```
class AppService(Service):

    async def on_start(self) -> None:
        print('APP STARTING')
        import pydot
        import io
        o = io.StringIO()
        beacon = self.app.beacon.root or self.app.beacon
        beacon.as_graph().to_dot(o)
        graph, = pydot.graph_from_dot_data(o.getvalue())
        print('WRITING GRAPH TO image.png')
        with open('image.png', 'wb') as fh:
            fh.write(graph.create_png())
```

----------------------------------------

TITLE: Define an App Service with a Runtime Dependency
DESCRIPTION: This Python code defines an App service that manages a PageViewCache service. It demonstrates adding a runtime dependency and provides a cached property for the PageViewCache.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
class App(Service):
    page_view_cache: PageViewCache = None

    async def on_start(self) -> None:
        await self.add_runtime_dependency(self.page_view_cache)

    @cached_property
    def page_view_cache(self) -> PageViewCache:
        return PageViewCache()
```

----------------------------------------

TITLE: Bump Version and Update Changelog
DESCRIPTION: Automates the process of bumping the project's version and updating the changelog using the `cz bump` command. It detects the type of version increment (patch, minor, major) and creates a new Git tag.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_7

LANGUAGE: sh
CODE:
```
./scripts/bump.sh
# Example output:
# + cz bump --changelog
# bump: version 0.2.0 → 0.2.1
# tag to create: 0.2.1
# increment detected: PATCH
#
# [master b35722f] bump: version 0.2.0 → 0.2.1
#  2 files changed, 2 insertions(+), 1 deletion(-)
#
# ...
#
# Done!
```

----------------------------------------

TITLE: Define a Service with Redis Dependency in Python
DESCRIPTION: Demonstrates how to define a service class 'PageViewCache' that depends on a Redis connection. It includes methods for updating and retrieving data from Redis, with an 'on_start' callback to establish the connection.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_0

LANGUAGE: python
CODE:
```
class PageViewCache(Service):
    redis: Redis = None

    async def on_start(self) -> None:
        self.redis = connect_to_redis()

    async def update(self, url: str, n: int = 1) -> int:
        return await self.redis.incr(url, n)

    async def get(self, url: str) -> int:
        return await self.redis.get(url)
```

----------------------------------------

TITLE: Define a Background Task using @Service.task
DESCRIPTION: Illustrates how to define a background task using the `@Service.task` decorator. This method runs concurrently with the service's lifecycle and is managed automatically.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/creating-service.md#_snippet_6

LANGUAGE: python
CODE:
```
class MyService(Service):

    @Service.task
    async def _my_coro(self) -> None:
        print('Executing coroutine')
```

----------------------------------------

TITLE: Generate and Save Service Graph
DESCRIPTION: This Python code demonstrates how to generate a service graph using pydot and save it as a PNG image. It's implemented within an AppService's on_start method, requiring pydot and io libraries.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
class AppService(Service):

    async def on_start(self) -> None:
        print('APP STARTING')
        import pydot
        import io
        o = io.StringIO()
        beacon = self.app.beacon.root or self.app.beacon
        beacon.as_graph().to_dot(o)
        graph, = pydot.graph_from_dot_data(o.getvalue())
        print('WRITING GRAPH TO image.png')
        with open('image.png', 'wb') as fh:
            fh.write(graph.create_png())
```

----------------------------------------

TITLE: Transform Async Functions for Older Python Versions
DESCRIPTION: Illustrates a source code transformation to rewrite Python async functions into a format compatible with older Python versions using `yield from`. This allows asynchronous operations to be used in environments without native async/await support.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_21

LANGUAGE: python
CODE:
```
@coroutine
def foo():
    yield from asyncio.sleep(1.0)

```

----------------------------------------

TITLE: Define a Service with Redis Dependency
DESCRIPTION: This Python code defines a PageViewCache service that depends on Redis. It includes methods to update and retrieve data from Redis, with an on_start callback to establish the Redis connection.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
class PageViewCache(Service):
    redis: Redis = None

    async def on_start(self) -> None:
        self.redis = connect_to_redis()

    async def update(self, url: str, n: int = 1) -> int:
        return await self.redis.incr(url, n)

    async def get(self, url: str) -> int:
        return await self.redis.get(url)
```

----------------------------------------

TITLE: Commit Changes with Conventional Commits CLI
DESCRIPTION: Uses the `cz commit` command to help format commit messages according to the Conventional Commits specification. It prompts the user for commit type, scope, and message.

SOURCE: https://github.com/faust-streaming/mode/blob/master/CONTRIBUTING.md#_snippet_5

LANGUAGE: sh
CODE:
```
cz commit
# Example prompts and response:
? Select the type of change you are committing docs: Documentation only changes
? What is the scope of this change? (class or file name): (press [enter] to skip) README
? Write a short and imperative summary of the code changes: (lower case and no period) correct spelling of README
? Provide additional contextual information about the code changes: (press [enter] to skip)

? Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer No
? Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip)

# Resulting commit message:
docs(README): correct spelling of README
```

----------------------------------------

TITLE: Transform Type Annotations to Comments
DESCRIPTION: Demonstrates a source code transformation to convert Python type annotations into comments. This is useful for maintaining compatibility with older Python versions that do not fully support type annotations.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_20

LANGUAGE: python
CODE:
```
class Point:
    x = 0  # type: int
    y = 0  # type: int

```

----------------------------------------

TITLE: Set Gevent as the Event Loop
DESCRIPTION: This Python code snippet shows how to configure the 'mode' library to use 'gevent' as its event loop implementation. This must be done early in the application's entry point, before other third-party libraries are imported, to ensure proper integration.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_15

LANGUAGE: Python
CODE:
```
import mode.loop
mode.loop.use('gevent')
```

----------------------------------------

TITLE: Schedule Background Tasks in a Service with Python
DESCRIPTION: Shows how to schedule a background task within a Mode service using the '@Service.timer' decorator. The '_update_cache' method is set to run periodically (every 1.0 second) to update cache data.

SOURCE: https://github.com/faust-streaming/mode/blob/master/README.md#_snippet_2

LANGUAGE: python
CODE:
```
class PageViewCache(Service):

    @Service.timer(1.0)
    async def _update_cache(self) -> None:
        self.data = await cache.get('key')
```

----------------------------------------

TITLE: Service with a Timed Background Task
DESCRIPTION: This Python code shows a PageViewCache service that includes a background task scheduled to run every 1.0 second using the @Service.timer decorator. The task retrieves data from a cache.

SOURCE: https://github.com/faust-streaming/mode/blob/master/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
class PageViewCache(Service):

    @Service.timer(1.0)
    async def _update_cache(self) -> None:
        self.data = await cache.get('key')
```